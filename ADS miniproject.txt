package Day1;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JButton;
//import javax.swing.JTextField;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
//import javax.swing.JTextArea;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
//import javax.swing.JScrollBar;
//import javax.swing.JList;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import java.awt.Color;
import javax.swing.JPanel;

public class Shop {

	private JFrame frame;
	private JTable table;
	double bill=0;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Shop window = new Shop();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public Shop() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 1178, 751);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		JLabel lblNewLabel = new JLabel("Welcome To BookStore Management System");
		lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 21));
		lblNewLabel.setBounds(328, 31, 552, 37);
		frame.getContentPane().add(lblNewLabel);
		
		
		
		JCheckBox chckbxRegister = new JCheckBox("Register");
		chckbxRegister.setFont(new Font("Tahoma", Font.BOLD, 19));
		chckbxRegister.setBounds(36, 144, 171, 21);
		frame.getContentPane().add(chckbxRegister);
		
		JCheckBox chckbxPen = new JCheckBox("Pen");
		chckbxPen.setFont(new Font("Tahoma", Font.BOLD, 18));
		chckbxPen.setBounds(36, 187, 93, 21);
		frame.getContentPane().add(chckbxPen);
		
		JCheckBox chckbxPencil = new JCheckBox("Pencil");
		chckbxPencil.setFont(new Font("Tahoma", Font.BOLD, 18));
		chckbxPencil.setBounds(36, 226, 93, 21);
		frame.getContentPane().add(chckbxPencil);
		
		JCheckBox chckbxNotebook = new JCheckBox("NoteBook");
		chckbxNotebook.setFont(new Font("Tahoma", Font.BOLD, 18));
		chckbxNotebook.setBounds(36, 266, 151, 21);
		frame.getContentPane().add(chckbxNotebook);
		
		JCheckBox chckbxDrawingbook = new JCheckBox("DrawingBook");
		chckbxDrawingbook.setFont(new Font("Tahoma", Font.BOLD, 18));
		chckbxDrawingbook.setBounds(36, 306, 151, 21);
		frame.getContentPane().add(chckbxDrawingbook);
		
		JCheckBox chckbxRubber = new JCheckBox("Rubber");
		chckbxRubber.setFont(new Font("Tahoma", Font.BOLD, 18));
		chckbxRubber.setBounds(36, 348, 120, 21);
		frame.getContentPane().add(chckbxRubber);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(520, 120, 589, 457);
		frame.getContentPane().add(scrollPane);
		
		 DefaultTableModel model = new DefaultTableModel();
		
		table = new JTable();
		table.setFont(new Font("Tahoma", Font.BOLD, 18));
		table.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"Item", "Quantity", "Price", "Total"
			}
		) {
			Class[] columnTypes = new Class[] {
				String.class, Object.class, Object.class, Object.class
			};
			public Class getColumnClass(int columnIndex) {
				return columnTypes[columnIndex];
			}
		});
		table.getColumnModel().getColumn(0).setPreferredWidth(200);
		scrollPane.setViewportView(table);
		
		JComboBox comboregister = new JComboBox();
		comboregister.addItem("100");
		comboregister.addItem("200");
		comboregister.addItem("400");
		comboregister.addItem("Graph");
		comboregister.addItem("Practical");
		comboregister.setSelectedItem(null);
		comboregister.setBounds(259, 143, 55, 21);
		frame.getContentPane().add(comboregister);
		
		JComboBox comboPen = new JComboBox();
		comboPen.addItem("Blue");
		comboPen.addItem("Black");
		comboPen.addItem("Red");
		comboPen.setSelectedItem(null);
		comboPen.setBounds(259, 190, 55, 21);
		frame.getContentPane().add(comboPen);
		
		JSpinner spinner = new JSpinner();
		spinner.setFont(new Font("Tahoma", Font.BOLD, 18));
		spinner.setBounds(383, 144, 64, 20);
		frame.getContentPane().add(spinner);
		
		JComboBox comboPencil = new JComboBox();
		comboPencil.addItem("Black");
		comboPencil.addItem("Colorful");
		comboPencil.setSelectedItem(null);
		comboPencil.setBounds(259, 229, 55, 21);
		frame.getContentPane().add(comboPencil);
		
		JComboBox comboNotebook = new JComboBox();
		comboNotebook.addItem("1 Line");
		comboNotebook.addItem("2 Line");
		comboNotebook.addItem("4 Line");
		comboNotebook.setSelectedItem(null);
		comboNotebook.setBounds(259, 269, 55, 21);
		frame.getContentPane().add(comboNotebook);
		
		JComboBox comboDrawingbook = new JComboBox();
		comboDrawingbook.addItem("Small");
		comboDrawingbook.addItem("Large");
		comboDrawingbook.setSelectedItem(null);
		comboDrawingbook.setBounds(259, 306, 55, 21);
		frame.getContentPane().add(comboDrawingbook);
		
		JComboBox comboRubber = new JComboBox();
		comboRubber.addItem("Small");
		comboRubber.addItem("Large");
		comboRubber.setSelectedItem(null);
		comboRubber.setBounds(259, 351, 55, 21);
		frame.getContentPane().add(comboRubber);
		
		JComboBox comboPaint = new JComboBox();
		comboPaint.addItem("Crayon");
		comboPaint.addItem("Water");
		comboPaint.addItem("Oil");
		comboPaint.setSelectedItem(null);
		comboPaint.setBounds(259, 391, 55, 21);
		frame.getContentPane().add(comboPaint);
		
		JSpinner spinner_1 = new JSpinner();
		spinner_1.setFont(new Font("Tahoma", Font.BOLD, 18));
		spinner_1.setBounds(383, 187, 64, 20);
		frame.getContentPane().add(spinner_1);
		
		JSpinner spinner_1_1 = new JSpinner();
		spinner_1_1.setFont(new Font("Tahoma", Font.BOLD, 18));
		spinner_1_1.setBounds(383, 226, 64, 20);
		frame.getContentPane().add(spinner_1_1);
		
		JSpinner spinner_1_2 = new JSpinner();
		spinner_1_2.setFont(new Font("Tahoma", Font.BOLD, 18));
		spinner_1_2.setBounds(383, 266, 64, 20);
		frame.getContentPane().add(spinner_1_2);
		
		JSpinner spinner_1_3 = new JSpinner();
		spinner_1_3.setFont(new Font("Tahoma", Font.BOLD, 18));
		spinner_1_3.setBounds(383, 306, 64, 20);
		frame.getContentPane().add(spinner_1_3);
		
		JSpinner spinner_1_4 = new JSpinner();
		spinner_1_4.setFont(new Font("Tahoma", Font.BOLD, 18));
		spinner_1_4.setBounds(383, 348, 64, 20);
		frame.getContentPane().add(spinner_1_4);
		
		
		
		JCheckBox chckbxPaint = new JCheckBox("Paint");
		chckbxPaint.setFont(new Font("Tahoma", Font.BOLD, 18));
		chckbxPaint.setBounds(36, 391, 93, 21);
		frame.getContentPane().add(chckbxPaint);
		
		JSpinner spinner_2 = new JSpinner();
		spinner_2.setFont(new Font("Tahoma", Font.BOLD, 18));
		spinner_2.setBounds(383, 388, 64, 20);
		frame.getContentPane().add(spinner_2);
		
		
		JComboBox comboPaper = new JComboBox();
		comboPaper.addItem("Line");
		comboPaper.addItem("Plain");
		comboPaper.addItem("A4");
		comboPaper.addItem("A3");
		comboPaper.addItem("Photo");
		comboPaper.setSelectedItem(null);
		comboPaper.setBounds(259, 440, 55, 21);
		frame.getContentPane().add(comboPaper);
		
		JCheckBox chckbxPaper = new JCheckBox("Paper");
		chckbxPaper.setFont(new Font("Tahoma", Font.BOLD, 18));
		chckbxPaper.setBounds(36, 440, 93, 21);
		frame.getContentPane().add(chckbxPaper);
		
		JSpinner spinner_2_1 = new JSpinner();
		spinner_2_1.setFont(new Font("Tahoma", Font.BOLD, 18));
		spinner_2_1.setBounds(383, 441, 64, 20);
		frame.getContentPane().add(spinner_2_1);
		
		
		JCheckBox chckbxGeometryBox = new JCheckBox("GeometryBox");
		chckbxGeometryBox.setFont(new Font("Tahoma", Font.BOLD, 18));
		chckbxGeometryBox.setBounds(36, 485, 151, 21);
		frame.getContentPane().add(chckbxGeometryBox);
		
		JComboBox comboGeometry = new JComboBox();
		comboGeometry.addItem("Small");
		comboGeometry.addItem("Large");
		comboGeometry.setSelectedItem(null);
		comboGeometry.setBounds(259, 488, 55, 21);
		frame.getContentPane().add(comboGeometry);
		
		JSpinner spinner_2_1_1 = new JSpinner();
		spinner_2_1_1.setFont(new Font("Tahoma", Font.BOLD, 18));
		spinner_2_1_1.setBounds(383, 489, 64, 20);
		frame.getContentPane().add(spinner_2_1_1);
		
		
		
		JLabel lblNewLabel_4 = new JLabel("Total");
		lblNewLabel_4.setForeground(Color.BLACK);
		lblNewLabel_4.setBackground(Color.BLACK);
		lblNewLabel_4.setFont(new Font("Tahoma", Font.BOLD, 21));
		lblNewLabel_4.setBounds(1016, 588, 93, 44);
		frame.getContentPane().add(lblNewLabel_4);
		
		
		JPanel panel_2 = new JPanel();
		panel_2.setBackground(Color.PINK);
		panel_2.setBounds(519, 78, 645, 636);
		frame.getContentPane().add(panel_2);
		panel_2.setLayout(null);
		
		
		//Label For +18% GST
		JLabel lblNewLabel_6 = new JLabel("");
		lblNewLabel_6.setFont(new Font("Tahoma", Font.BOLD, 16));
		lblNewLabel_6.setBounds(468, 548, 117, 23);
		panel_2.add(lblNewLabel_6);
		
		
		
		// Label For Total+GST
		JLabel lblNewLabel_7 = new JLabel("");
		lblNewLabel_7.setForeground(Color.RED);
		lblNewLabel_7.setFont(new Font("Tahoma", Font.BOLD, 22));
		lblNewLabel_7.setBounds(500, 573, 107, 30);
		panel_2.add(lblNewLabel_7);
		
		
		
		JButton btnNewButton1 = new JButton("Generate Bill");
		btnNewButton1.setFont(new Font("Tahoma", Font.BOLD, 18));
		btnNewButton1.setBounds(106, 986, 326, 50);
		frame.getContentPane().add(btnNewButton1);
		
		
		
		JButton btnNewButton = new JButton("Add");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			//this.textArea.append("Hello");
				//JOptionPane.showMessageDialog(null, "Hello");
				 
				double price;
				double qty;
				double cal=0;
				double sum=0;
				
				
				// For Register
				if(chckbxRegister.isSelected())
				{
					String Register= chckbxRegister.getText();
					String mes= comboregister.getSelectedItem().toString();
					price=10;
					 qty = (Integer) spinner.getValue();
					//if(qty<=0)
					//{
					//	 JOptionPane.showMessageDialog(null,"Quantity Cannot Be Zero Or Less Than Zero.","Alert",JOptionPane.WARNING_MESSAGE);   
					//}
					//else
					//{
					
					if(mes.equals("100"))
					{
						cal=(qty*price);
						Register="Register 100 pages";
						
					DefaultTableModel	 model = (DefaultTableModel)table.getModel();
			                model.addRow(new Object[]
			                {   
			                Register,
			                qty,
			                
			                 price,
			                 cal
			                 
			                
			                });  
						
					}
					else if(mes.equals("200"))
					{
						Register="Register 200 pages";
						price=20;
						cal=(qty*price);
						
						DefaultTableModel	 model = (DefaultTableModel)table.getModel();
				                model.addRow(new Object[]
				                {   
				                Register,
				                qty,
				                
				                 price,
				                 cal
				                 
				                 
				                });  
						
					}
					else if(mes.equals("400"))
					{
						Register="Register 400 pages";
						price=40;
						cal=(qty*price);
						
						DefaultTableModel	 model = (DefaultTableModel)table.getModel();
				                model.addRow(new Object[]
				                {   
				                Register,
				                qty,
				               
				                 price,
				                 cal
				                 
				                 
				                });  
						
					}
					else if(mes.equals("Graph"))
					{
						Register="GraphBook";
						price=50;
						cal=(qty*price);
						
						DefaultTableModel	 model = (DefaultTableModel)table.getModel();
				                model.addRow(new Object[]
				                {   
				                Register,
				                qty,
				               
				                 price,
				                 cal
				                 
				                 
				                });  
						
					}
					else
					{
						Register="PracticalBook";
						price=60;
						cal=(qty*price);
						
						DefaultTableModel	 model = (DefaultTableModel)table.getModel();
				                model.addRow(new Object[]
				                {   
				                Register,
				                qty,
				               
				                 price,
				                 cal
				                 
				                 
				                });  
					}
				}
					//}
					
					
					// For Pen
					if(chckbxPen.isSelected())
					{
						String Pen= chckbxPen.getText();
						String mes1= comboPen.getSelectedItem().toString();
						price=5;
						 qty = (Integer) spinner_1.getValue();
						 
						 
						 
						 
						 if(mes1.equals("Black"))
							{
								cal=(qty*price);
								Pen="Pen Black";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Pen,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else if(mes1.equals("Blue"))
							{
								cal=(qty*price);
								Pen="Pen Blue";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Pen,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else
						 {
							 
							 cal=(qty*price);
								Pen="Pen Red";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Pen,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
							 
						 }
						 
					}
					
					//For Pencil
					
					if(chckbxPencil.isSelected())
					{
						String Pencil= chckbxPencil.getText();
						String mes2= comboPencil.getSelectedItem().toString();
						price=3;
						 qty = (Integer) spinner_1_1.getValue();
						 
						 
						 
						 if(mes2.equals("Black"))
							{
								cal=(qty*price);
								Pencil="Pencil Black";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Pencil,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else
						 {
							 price=6;
							 cal=(qty*price);
								Pencil="Pencil Colourful";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Pencil,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
						 }
					}
					
					
					
					//For NoteBook
					
					if(chckbxNotebook.isSelected())
					{
						String Notebook= chckbxNotebook.getText();
						String mes3= comboNotebook.getSelectedItem().toString();
						price=3;
						 qty = (Integer) spinner_1_2.getValue();
						 
						 if(mes3.equals("1 Line"))
							{
							 price=15;
								cal=(qty*price);
								Notebook="1 Line Notebook";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Notebook,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else if(mes3.equals("2 Line"))
							{
							 price=20;
								cal=(qty*price);
								Notebook="2 Line Notebook";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Notebook,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else
						 {
							 price=25;
							 cal=(qty*price);
								Notebook="4 Line Notebook";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Notebook,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
						 }
						 
					}
					
					
					
					//For DrwaingBook
					
					if(chckbxDrawingbook.isSelected())
					{
						String Drawing= chckbxDrawingbook.getText();
						String mes4= comboDrawingbook.getSelectedItem().toString();
						price=30;
						 qty = (Integer) spinner_1_3.getValue();
						 
						 
						 if(mes4.equals("small"))
							{
							 price=30;
								cal=(qty*price);
								Drawing="Small Drawingbook";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Drawing,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else
						 {
							 price=60;
								cal=(qty*price);
								Drawing="Large Drawingbook";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Drawing,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
						 }
						 
					}
					
					
					
					//For Rubber
					
					if(chckbxRubber.isSelected())
					{
						String Rubber= chckbxRubber.getText();
						String mes5= comboRubber.getSelectedItem().toString();
						price=30;
						 qty = (Integer) spinner_1_4.getValue();
						 
						 
						 if(mes5.equals("small"))
							{
							 price=2;
								cal=(qty*price);
								Rubber="Small Rubber";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Rubber,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else
						 {
							 price=5;
								cal=(qty*price);
								Rubber="Large Rubber";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Rubber,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
						 }
						 
						 
					}
					
					
					
					
					// For Paint
					if(chckbxPaint.isSelected())
					{
						String Paint= chckbxPaint.getText();
						String mes6= comboPaint.getSelectedItem().toString();
						price=20;
						 qty = (Integer) spinner_2.getValue();
						 
						 
						 if(mes6.equals("Crayon"))
							{
							 price=20;
								cal=(qty*price);
								Paint="Crayon Paint";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Paint,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else if(mes6.equals("Water"))
							{
							 price=30;
								cal=(qty*price);
								Paint="Water Paint";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Paint,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else
						 {
							 price=40;
								cal=(qty*price);
								Paint="Water Paint";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Paint,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });   
						 }
						 
						 
					}
					
					
					//For Paper
					if(chckbxPaper.isSelected())
					{
						String Paper= chckbxPaper.getText();
						String mes7= comboPaper.getSelectedItem().toString();
						price=20;
						 qty = (Integer) spinner_2_1.getValue();
						 
						 
						 
						 if(mes7.equals("Line"))
							{
							 price=20;
								cal=(qty*price);
								Paper="Line Paper";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Paper,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else  if(mes7.equals("Plain"))
							{
							 price=10;
								cal=(qty*price);
								Paper="Plain Paper";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Paper,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else if(mes7.equals("A4"))
							{
							 price=5;
								cal=(qty*price);
								Paper="A4 Paper";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Paper,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else if(mes7.equals("A3"))
							{
							 price=4;
								cal=(qty*price);
								Paper="A3 Paper";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Paper,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else
						 {
							 price=30;
								cal=(qty*price);
								Paper="Photo Paper";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Paper,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
							 
						 }
					}
					
					
					
					// For Geomerty Box
					if(chckbxGeometryBox.isSelected())
					{
						String Box= chckbxGeometryBox.getText();
						String mes8= comboGeometry.getSelectedItem().toString();
						price=50;
						 qty = (Integer) spinner_2_1_1.getValue();
						 
						 
						 if(mes8.equals("Small"))
							{
							 price=50;
								cal=(qty*price);
								Box="Small GeometryBox";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Box,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							}
						 else
						 {
							 price=100;
								cal=(qty*price);
								Box="Large GeometryBox";
								
							DefaultTableModel	 model = (DefaultTableModel)table.getModel();
					                model.addRow(new Object[]
					                {   
					                Box,
					                qty,
					                
					                 price,
					                 cal
					                 
					                
					                });  
								
							 
						 }
						 
					}
					
					
					 for(double i=0; i <table.getRowCount(); i++)
				        {
				            sum = sum + Double.parseDouble(table.getValueAt((int) i, 3).toString()); 
				        }
					 
					// For GST
						double gst= (sum*18)/100;
						double tot=gst+sum;
						 //lblNewLabel_4.setText(Double.toString(tot));
						
						
						// For Setting Value For Total Item
					 lblNewLabel_4.setText(Double.toString(sum));
					 
					 // For Bill Adding GST
					 bill=tot;
					
					 //For Setting Lable For GST
					 lblNewLabel_6.setText("+ 18% GST");
					 
					 //lblNewLabel_7.setText(""+bill);
					
				//End Of Button	
				}
		
	
				
				
				
			
		});
		btnNewButton.setFont(new Font("Tahoma", Font.BOLD, 18));
		btnNewButton.setBounds(106, 586, 326, 50);
		frame.getContentPane().add(btnNewButton);
		
		JLabel lblNewLabel_1 = new JLabel("Items");
		lblNewLabel_1.setFont(new Font("Tahoma", Font.BOLD, 18));
		lblNewLabel_1.setBounds(54, 85, 93, 31);
		frame.getContentPane().add(lblNewLabel_1);
		
		JLabel lblNewLabel_2 = new JLabel("Option");
		lblNewLabel_2.setFont(new Font("Tahoma", Font.BOLD, 18));
		lblNewLabel_2.setBounds(250, 85, 64, 31);
		frame.getContentPane().add(lblNewLabel_2);
		
		JLabel lblNewLabel_3 = new JLabel("Quantity");
		lblNewLabel_3.setFont(new Font("Tahoma", Font.BOLD, 18));
		lblNewLabel_3.setBounds(377, 84, 82, 32);
		frame.getContentPane().add(lblNewLabel_3);
		
		JPanel panel = new JPanel();
		panel.setBackground(Color.CYAN);
		panel.setBounds(0, 0, 1164, 80);
		frame.getContentPane().add(panel);
		
		JPanel panel_1 = new JPanel();
		panel_1.setBackground(Color.PINK);
		panel_1.setBounds(0, 78, 517, 636);
		frame.getContentPane().add(panel_1);
		
		
		
		JButton btnNewButton_1 = new JButton("Bill");
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(null, "Thank You For Shopping With Us..... \n \t           Your Bill Is: "+bill);
			}
		});
		btnNewButton_1.setFont(new Font("Tahoma", Font.BOLD, 18));
		btnNewButton_1.setBounds(39, 513, 216, 45);
		panel_2.add(btnNewButton_1);
		
		JLabel lblNewLabel_5 = new JLabel("Reciept");
		lblNewLabel_5.setFont(new Font("Tahoma", Font.BOLD, 18));
		lblNewLabel_5.setBounds(246, 10, 84, 23);
		panel_2.add(lblNewLabel_5);
		
	}
}